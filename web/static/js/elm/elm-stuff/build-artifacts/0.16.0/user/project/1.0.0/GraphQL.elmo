Elm.GraphQL = Elm.GraphQL || {};
Elm.GraphQL.make = function (_elm) {
   "use strict";
   _elm.GraphQL = _elm.GraphQL || {};
   if (_elm.GraphQL.values) return _elm.GraphQL.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Task = Elm.Task.make(_elm);
   var _op = {};
   var apply = F2(function (func,value) {
      return A3($Json$Decode.object2,
      F2(function (x,y) {    return x(y);}),
      func,
      value);
   });
   var queryResult = function (decoder) {
      return $Json$Decode.oneOf(_U.list([A2($Json$Decode.at,
                                        _U.list(["data"]),
                                        decoder)
                                        ,$Json$Decode.fail("expecting data")]));
   };
   var query = F5(function (url,
   query,
   operation,
   variables,
   decoder) {
      return A2($Http.get,
      queryResult(decoder),
      A2($Http.url,
      url,
      _U.list([{ctor: "_Tuple2",_0: "query",_1: query}
              ,{ctor: "_Tuple2",_0: "operationName",_1: operation}
              ,{ctor: "_Tuple2",_0: "variables",_1: variables}])));
   });
   return _elm.GraphQL.values = {_op: _op
                                ,query: query
                                ,queryResult: queryResult
                                ,apply: apply};
};