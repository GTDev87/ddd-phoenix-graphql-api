Elm.Update = Elm.Update || {};
Elm.Update.make = function (_elm) {
   "use strict";
   _elm.Update = _elm.Update || {};
   if (_elm.Update.values) return _elm.Update.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Actions = Elm.Actions.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Model = Elm.Model.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var update = F2(function (action,model) {
      var _p0 = action;
      switch (_p0.ctor)
      {case "Remove": return _U.update(model,
           {items: A2($List.filter,
           function (mappedItem) {
              return !_U.eq(_p0._0,mappedItem.id);
           },
           model.items)});
         case "Add": return _U.update(model,
           {items: A2($List._op["::"],model.item,model.items)
           ,item: _U.update($Model.newItem,{id: model.nextId})
           ,nextId: model.nextId + 1});
         case "UpdateTitle": var item = model.item;
           var updatedItem = _U.update(item,{title: _p0._0});
           var newModel = _U.update(model,{item: updatedItem});
           return newModel;
         case "UpdateUrl": var item = model.item;
           var updatedItem = _U.update(item,{url: _p0._0});
           var newModel = _U.update(model,{item: updatedItem});
           return newModel;
         default: return model;}
   });
   return _elm.Update.values = {_op: _op,update: update};
};